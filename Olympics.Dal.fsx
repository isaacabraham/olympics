#r "nuget:Microsoft.Data.SqlClient"

// This code was generated by SqlHydra.SqlServer.
namespace DataAccess
open System.Data

type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
        member __.Name = column
        member __.IsNull() = getOrdinal column |> reader.IsDBNull
        override __.ToString() = __.Name

type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

type OptionalColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) =
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getter o)

type RequiredBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getValue :?> byte[]

type OptionalBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) =
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getValue o :?> byte[])

module dbo =
    type Athlete =
        { Gender: string
          Id: System.Guid
          FirstName: Option<string>
          LastName: Option<string>
          Country: Option<string> }

    type AthleteReader(reader: IDataReader, getOrdinal) =
        member __.Gender = RequiredColumn(reader, getOrdinal, reader.GetString, "Gender")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.FirstName = OptionalColumn(reader, getOrdinal, reader.GetString, "FirstName")
        member __.LastName = OptionalColumn(reader, getOrdinal, reader.GetString, "LastName")
        member __.Country = OptionalColumn(reader, getOrdinal, reader.GetString, "Country")
        member __.Read() =
            { Gender = __.Gender.Read()
              Id = __.Id.Read()
              FirstName = __.FirstName.Read()
              LastName = __.LastName.Read()
              Country = __.Country.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    type Event =
        { Id: System.Guid
          Sport: string
          Discipline: string
          Event: string }

    type EventReader(reader: IDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.Sport = RequiredColumn(reader, getOrdinal, reader.GetString, "Sport")
        member __.Discipline = RequiredColumn(reader, getOrdinal, reader.GetString, "Discipline")
        member __.Event = RequiredColumn(reader, getOrdinal, reader.GetString, "Event")
        member __.Read() =
            { Id = __.Id.Read()
              Sport = __.Sport.Read()
              Discipline = __.Discipline.Read()
              Event = __.Event.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    type Game =
        { Id: System.Guid
          Season: string
          City: string
          Year: int }

    type GameReader(reader: IDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.Season = RequiredColumn(reader, getOrdinal, reader.GetString, "Season")
        member __.City = RequiredColumn(reader, getOrdinal, reader.GetString, "City")
        member __.Year = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Year")
        member __.Read() =
            { Id = __.Id.Read()
              Season = __.Season.Read()
              City = __.City.Read()
              Year = __.Year.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    type Result =
        { Id: System.Guid
          GameId: System.Guid
          AthleteId: string
          EventId: string
          Medal: string }

    type ResultReader(reader: IDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.GameId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "GameId")
        member __.AthleteId = RequiredColumn(reader, getOrdinal, reader.GetString, "AthleteId")
        member __.EventId = RequiredColumn(reader, getOrdinal, reader.GetString, "EventId")
        member __.Medal = RequiredColumn(reader, getOrdinal, reader.GetString, "Medal")
        member __.Read() =
            { Id = __.Id.Read()
              GameId = __.GameId.Read()
              AthleteId = __.AthleteId.Read()
              EventId = __.EventId.Read()
              Medal = __.Medal.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    type HydraReader(reader: IDataReader) =
        let entities = System.Collections.Generic.Dictionary<string, string -> int>()
        let buildGetOrdinal entity=
            if not (entities.ContainsKey(entity)) then
                let dictionary =
                    [0..reader.FieldCount-1]
                    |> List.mapi (fun i fieldIdx -> reader.GetName(fieldIdx), i)
                    |> List.groupBy (fun (nm, i) -> nm)
                    |> List.map (fun (_, items) -> List.tryItem(entities.Count) items |> Option.defaultWith (fun () -> List.last items))
                    |> dict
                let getOrdinal = fun idx -> dictionary.Item idx
                entities.Add(entity, getOrdinal)
                getOrdinal
            else
                entities.[entity]

        member __.Athlete = AthleteReader(reader, buildGetOrdinal "Athlete")
        member __.Event = EventReader(reader, buildGetOrdinal "Event")
        member __.Game = GameReader(reader, buildGetOrdinal "Game")
        member __.Result = ResultReader(reader, buildGetOrdinal "Result")
